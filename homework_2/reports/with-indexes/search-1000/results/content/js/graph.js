/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 135.0, "minX": 0.0, "maxY": 11992.0, "series": [{"data": [[0.0, 135.0], [0.1, 253.0], [0.2, 358.0], [0.3, 511.0], [0.4, 642.0], [0.5, 727.0], [0.6, 840.0], [0.7, 932.0], [0.8, 1043.0], [0.9, 1129.0], [1.0, 1246.0], [1.1, 1356.0], [1.2, 1404.0], [1.3, 1497.0], [1.4, 1588.0], [1.5, 1670.0], [1.6, 1739.0], [1.7, 1829.0], [1.8, 1899.0], [1.9, 1948.0], [2.0, 1988.0], [2.1, 2034.0], [2.2, 2086.0], [2.3, 2135.0], [2.4, 2205.0], [2.5, 2270.0], [2.6, 2323.0], [2.7, 2390.0], [2.8, 2462.0], [2.9, 2534.0], [3.0, 2591.0], [3.1, 2650.0], [3.2, 2727.0], [3.3, 2804.0], [3.4, 2859.0], [3.5, 2912.0], [3.6, 2963.0], [3.7, 3044.0], [3.8, 3099.0], [3.9, 3155.0], [4.0, 3210.0], [4.1, 3291.0], [4.2, 3352.0], [4.3, 3402.0], [4.4, 3477.0], [4.5, 3539.0], [4.6, 3607.0], [4.7, 3668.0], [4.8, 3742.0], [4.9, 3812.0], [5.0, 3873.0], [5.1, 3956.0], [5.2, 4008.0], [5.3, 4088.0], [5.4, 4142.0], [5.5, 4207.0], [5.6, 4277.0], [5.7, 4337.0], [5.8, 4407.0], [5.9, 4483.0], [6.0, 4546.0], [6.1, 4602.0], [6.2, 4670.0], [6.3, 4743.0], [6.4, 4800.0], [6.5, 4867.0], [6.6, 4948.0], [6.7, 5008.0], [6.8, 5074.0], [6.9, 5165.0], [7.0, 5219.0], [7.1, 5283.0], [7.2, 5338.0], [7.3, 5416.0], [7.4, 5469.0], [7.5, 5525.0], [7.6, 5568.0], [7.7, 5662.0], [7.8, 5733.0], [7.9, 5802.0], [8.0, 5872.0], [8.1, 5942.0], [8.2, 6008.0], [8.3, 6053.0], [8.4, 6128.0], [8.5, 6188.0], [8.6, 6247.0], [8.7, 6293.0], [8.8, 6348.0], [8.9, 6445.0], [9.0, 6499.0], [9.1, 6553.0], [9.2, 6617.0], [9.3, 6709.0], [9.4, 6763.0], [9.5, 6822.0], [9.6, 6892.0], [9.7, 6976.0], [9.8, 7032.0], [9.9, 7087.0], [10.0, 7157.0], [10.1, 7244.0], [10.2, 7300.0], [10.3, 7355.0], [10.4, 7407.0], [10.5, 7511.0], [10.6, 7571.0], [10.7, 7637.0], [10.8, 7692.0], [10.9, 7749.0], [11.0, 7839.0], [11.1, 7904.0], [11.2, 7956.0], [11.3, 8022.0], [11.4, 8098.0], [11.5, 8147.0], [11.6, 8215.0], [11.7, 8292.0], [11.8, 8361.0], [11.9, 8428.0], [12.0, 8491.0], [12.1, 8584.0], [12.2, 8656.0], [12.3, 8710.0], [12.4, 8765.0], [12.5, 8808.0], [12.6, 8871.0], [12.7, 8925.0], [12.8, 8983.0], [12.9, 9051.0], [13.0, 9120.0], [13.1, 9177.0], [13.2, 9249.0], [13.3, 9319.0], [13.4, 9389.0], [13.5, 9464.0], [13.6, 9521.0], [13.7, 9592.0], [13.8, 9675.0], [13.9, 9734.0], [14.0, 9786.0], [14.1, 9862.0], [14.2, 9945.0], [14.3, 9996.0], [14.4, 10062.0], [14.5, 10136.0], [14.6, 10205.0], [14.7, 10257.0], [14.8, 10312.0], [14.9, 10388.0], [15.0, 10462.0], [15.1, 10515.0], [15.2, 10581.0], [15.3, 10658.0], [15.4, 10726.0], [15.5, 10779.0], [15.6, 10835.0], [15.7, 10897.0], [15.8, 10992.0], [15.9, 11049.0], [16.0, 11101.0], [16.1, 11156.0], [16.2, 11242.0], [16.3, 11308.0], [16.4, 11371.0], [16.5, 11433.0], [16.6, 11517.0], [16.7, 11572.0], [16.8, 11641.0], [16.9, 11645.0], [17.0, 11650.0], [17.1, 11652.0], [17.2, 11654.0], [17.3, 11655.0], [17.4, 11657.0], [17.5, 11659.0], [17.6, 11660.0], [17.7, 11660.0], [17.8, 11661.0], [17.9, 11663.0], [18.0, 11663.0], [18.1, 11663.0], [18.2, 11664.0], [18.3, 11665.0], [18.4, 11666.0], [18.5, 11666.0], [18.6, 11667.0], [18.7, 11668.0], [18.8, 11668.0], [18.9, 11668.0], [19.0, 11669.0], [19.1, 11669.0], [19.2, 11670.0], [19.3, 11670.0], [19.4, 11671.0], [19.5, 11671.0], [19.6, 11671.0], [19.7, 11672.0], [19.8, 11673.0], [19.9, 11673.0], [20.0, 11674.0], [20.1, 11674.0], [20.2, 11674.0], [20.3, 11675.0], [20.4, 11675.0], [20.5, 11676.0], [20.6, 11676.0], [20.7, 11676.0], [20.8, 11677.0], [20.9, 11677.0], [21.0, 11678.0], [21.1, 11679.0], [21.2, 11680.0], [21.3, 11680.0], [21.4, 11681.0], [21.5, 11681.0], [21.6, 11682.0], [21.7, 11682.0], [21.8, 11683.0], [21.9, 11683.0], [22.0, 11683.0], [22.1, 11684.0], [22.2, 11684.0], [22.3, 11684.0], [22.4, 11684.0], [22.5, 11685.0], [22.6, 11685.0], [22.7, 11685.0], [22.8, 11686.0], [22.9, 11686.0], [23.0, 11686.0], [23.1, 11687.0], [23.2, 11687.0], [23.3, 11687.0], [23.4, 11688.0], [23.5, 11688.0], [23.6, 11689.0], [23.7, 11689.0], [23.8, 11689.0], [23.9, 11690.0], [24.0, 11690.0], [24.1, 11690.0], [24.2, 11690.0], [24.3, 11691.0], [24.4, 11691.0], [24.5, 11692.0], [24.6, 11692.0], [24.7, 11692.0], [24.8, 11692.0], [24.9, 11693.0], [25.0, 11693.0], [25.1, 11693.0], [25.2, 11694.0], [25.3, 11694.0], [25.4, 11694.0], [25.5, 11695.0], [25.6, 11695.0], [25.7, 11695.0], [25.8, 11696.0], [25.9, 11696.0], [26.0, 11696.0], [26.1, 11696.0], [26.2, 11697.0], [26.3, 11697.0], [26.4, 11697.0], [26.5, 11697.0], [26.6, 11697.0], [26.7, 11698.0], [26.8, 11698.0], [26.9, 11698.0], [27.0, 11699.0], [27.1, 11699.0], [27.2, 11699.0], [27.3, 11699.0], [27.4, 11699.0], [27.5, 11699.0], [27.6, 11700.0], [27.7, 11700.0], [27.8, 11700.0], [27.9, 11700.0], [28.0, 11700.0], [28.1, 11700.0], [28.2, 11701.0], [28.3, 11701.0], [28.4, 11701.0], [28.5, 11701.0], [28.6, 11701.0], [28.7, 11702.0], [28.8, 11702.0], [28.9, 11703.0], [29.0, 11704.0], [29.1, 11705.0], [29.2, 11705.0], [29.3, 11705.0], [29.4, 11706.0], [29.5, 11706.0], [29.6, 11707.0], [29.7, 11707.0], [29.8, 11708.0], [29.9, 11709.0], [30.0, 11709.0], [30.1, 11709.0], [30.2, 11710.0], [30.3, 11710.0], [30.4, 11711.0], [30.5, 11711.0], [30.6, 11712.0], [30.7, 11713.0], [30.8, 11714.0], [30.9, 11714.0], [31.0, 11715.0], [31.1, 11716.0], [31.2, 11716.0], [31.3, 11717.0], [31.4, 11718.0], [31.5, 11718.0], [31.6, 11719.0], [31.7, 11719.0], [31.8, 11719.0], [31.9, 11720.0], [32.0, 11721.0], [32.1, 11722.0], [32.2, 11722.0], [32.3, 11723.0], [32.4, 11723.0], [32.5, 11724.0], [32.6, 11725.0], [32.7, 11725.0], [32.8, 11727.0], [32.9, 11727.0], [33.0, 11728.0], [33.1, 11728.0], [33.2, 11729.0], [33.3, 11730.0], [33.4, 11730.0], [33.5, 11731.0], [33.6, 11731.0], [33.7, 11732.0], [33.8, 11733.0], [33.9, 11733.0], [34.0, 11734.0], [34.1, 11735.0], [34.2, 11737.0], [34.3, 11738.0], [34.4, 11738.0], [34.5, 11739.0], [34.6, 11740.0], [34.7, 11741.0], [34.8, 11742.0], [34.9, 11743.0], [35.0, 11745.0], [35.1, 11746.0], [35.2, 11746.0], [35.3, 11747.0], [35.4, 11747.0], [35.5, 11748.0], [35.6, 11749.0], [35.7, 11750.0], [35.8, 11752.0], [35.9, 11753.0], [36.0, 11754.0], [36.1, 11755.0], [36.2, 11756.0], [36.3, 11757.0], [36.4, 11758.0], [36.5, 11759.0], [36.6, 11759.0], [36.7, 11760.0], [36.8, 11761.0], [36.9, 11761.0], [37.0, 11762.0], [37.1, 11763.0], [37.2, 11763.0], [37.3, 11763.0], [37.4, 11764.0], [37.5, 11765.0], [37.6, 11766.0], [37.7, 11766.0], [37.8, 11767.0], [37.9, 11768.0], [38.0, 11768.0], [38.1, 11769.0], [38.2, 11769.0], [38.3, 11769.0], [38.4, 11770.0], [38.5, 11770.0], [38.6, 11771.0], [38.7, 11771.0], [38.8, 11771.0], [38.9, 11772.0], [39.0, 11773.0], [39.1, 11773.0], [39.2, 11774.0], [39.3, 11774.0], [39.4, 11774.0], [39.5, 11775.0], [39.6, 11775.0], [39.7, 11776.0], [39.8, 11776.0], [39.9, 11776.0], [40.0, 11777.0], [40.1, 11777.0], [40.2, 11777.0], [40.3, 11778.0], [40.4, 11778.0], [40.5, 11778.0], [40.6, 11778.0], [40.7, 11779.0], [40.8, 11779.0], [40.9, 11780.0], [41.0, 11780.0], [41.1, 11781.0], [41.2, 11781.0], [41.3, 11781.0], [41.4, 11781.0], [41.5, 11782.0], [41.6, 11782.0], [41.7, 11782.0], [41.8, 11783.0], [41.9, 11783.0], [42.0, 11784.0], [42.1, 11784.0], [42.2, 11784.0], [42.3, 11785.0], [42.4, 11785.0], [42.5, 11785.0], [42.6, 11786.0], [42.7, 11786.0], [42.8, 11787.0], [42.9, 11787.0], [43.0, 11788.0], [43.1, 11788.0], [43.2, 11788.0], [43.3, 11789.0], [43.4, 11789.0], [43.5, 11789.0], [43.6, 11789.0], [43.7, 11789.0], [43.8, 11790.0], [43.9, 11790.0], [44.0, 11790.0], [44.1, 11791.0], [44.2, 11791.0], [44.3, 11791.0], [44.4, 11791.0], [44.5, 11791.0], [44.6, 11792.0], [44.7, 11792.0], [44.8, 11792.0], [44.9, 11792.0], [45.0, 11793.0], [45.1, 11793.0], [45.2, 11793.0], [45.3, 11793.0], [45.4, 11794.0], [45.5, 11794.0], [45.6, 11794.0], [45.7, 11794.0], [45.8, 11794.0], [45.9, 11795.0], [46.0, 11795.0], [46.1, 11795.0], [46.2, 11795.0], [46.3, 11796.0], [46.4, 11796.0], [46.5, 11796.0], [46.6, 11797.0], [46.7, 11797.0], [46.8, 11797.0], [46.9, 11797.0], [47.0, 11797.0], [47.1, 11797.0], [47.2, 11798.0], [47.3, 11798.0], [47.4, 11798.0], [47.5, 11799.0], [47.6, 11799.0], [47.7, 11799.0], [47.8, 11799.0], [47.9, 11799.0], [48.0, 11800.0], [48.1, 11800.0], [48.2, 11800.0], [48.3, 11800.0], [48.4, 11801.0], [48.5, 11801.0], [48.6, 11801.0], [48.7, 11801.0], [48.8, 11801.0], [48.9, 11802.0], [49.0, 11802.0], [49.1, 11802.0], [49.2, 11802.0], [49.3, 11803.0], [49.4, 11803.0], [49.5, 11803.0], [49.6, 11803.0], [49.7, 11803.0], [49.8, 11804.0], [49.9, 11804.0], [50.0, 11804.0], [50.1, 11804.0], [50.2, 11804.0], [50.3, 11804.0], [50.4, 11804.0], [50.5, 11805.0], [50.6, 11805.0], [50.7, 11805.0], [50.8, 11805.0], [50.9, 11805.0], [51.0, 11805.0], [51.1, 11806.0], [51.2, 11806.0], [51.3, 11806.0], [51.4, 11806.0], [51.5, 11806.0], [51.6, 11807.0], [51.7, 11807.0], [51.8, 11807.0], [51.9, 11807.0], [52.0, 11807.0], [52.1, 11807.0], [52.2, 11807.0], [52.3, 11808.0], [52.4, 11808.0], [52.5, 11808.0], [52.6, 11808.0], [52.7, 11808.0], [52.8, 11808.0], [52.9, 11809.0], [53.0, 11809.0], [53.1, 11809.0], [53.2, 11809.0], [53.3, 11809.0], [53.4, 11809.0], [53.5, 11809.0], [53.6, 11809.0], [53.7, 11810.0], [53.8, 11810.0], [53.9, 11810.0], [54.0, 11810.0], [54.1, 11810.0], [54.2, 11810.0], [54.3, 11810.0], [54.4, 11810.0], [54.5, 11811.0], [54.6, 11811.0], [54.7, 11811.0], [54.8, 11811.0], [54.9, 11811.0], [55.0, 11811.0], [55.1, 11812.0], [55.2, 11812.0], [55.3, 11812.0], [55.4, 11812.0], [55.5, 11812.0], [55.6, 11812.0], [55.7, 11813.0], [55.8, 11813.0], [55.9, 11813.0], [56.0, 11813.0], [56.1, 11813.0], [56.2, 11813.0], [56.3, 11813.0], [56.4, 11814.0], [56.5, 11814.0], [56.6, 11814.0], [56.7, 11814.0], [56.8, 11814.0], [56.9, 11814.0], [57.0, 11814.0], [57.1, 11814.0], [57.2, 11815.0], [57.3, 11815.0], [57.4, 11815.0], [57.5, 11815.0], [57.6, 11815.0], [57.7, 11815.0], [57.8, 11815.0], [57.9, 11815.0], [58.0, 11816.0], [58.1, 11816.0], [58.2, 11816.0], [58.3, 11816.0], [58.4, 11816.0], [58.5, 11816.0], [58.6, 11816.0], [58.7, 11816.0], [58.8, 11817.0], [58.9, 11817.0], [59.0, 11817.0], [59.1, 11817.0], [59.2, 11817.0], [59.3, 11817.0], [59.4, 11817.0], [59.5, 11817.0], [59.6, 11818.0], [59.7, 11818.0], [59.8, 11818.0], [59.9, 11818.0], [60.0, 11818.0], [60.1, 11818.0], [60.2, 11818.0], [60.3, 11819.0], [60.4, 11819.0], [60.5, 11819.0], [60.6, 11819.0], [60.7, 11819.0], [60.8, 11819.0], [60.9, 11819.0], [61.0, 11819.0], [61.1, 11820.0], [61.2, 11820.0], [61.3, 11820.0], [61.4, 11820.0], [61.5, 11820.0], [61.6, 11820.0], [61.7, 11820.0], [61.8, 11820.0], [61.9, 11821.0], [62.0, 11821.0], [62.1, 11821.0], [62.2, 11821.0], [62.3, 11821.0], [62.4, 11822.0], [62.5, 11822.0], [62.6, 11822.0], [62.7, 11822.0], [62.8, 11823.0], [62.9, 11823.0], [63.0, 11823.0], [63.1, 11823.0], [63.2, 11823.0], [63.3, 11823.0], [63.4, 11823.0], [63.5, 11824.0], [63.6, 11824.0], [63.7, 11824.0], [63.8, 11824.0], [63.9, 11824.0], [64.0, 11824.0], [64.1, 11825.0], [64.2, 11825.0], [64.3, 11825.0], [64.4, 11825.0], [64.5, 11825.0], [64.6, 11825.0], [64.7, 11826.0], [64.8, 11826.0], [64.9, 11826.0], [65.0, 11826.0], [65.1, 11826.0], [65.2, 11826.0], [65.3, 11826.0], [65.4, 11827.0], [65.5, 11827.0], [65.6, 11827.0], [65.7, 11827.0], [65.8, 11827.0], [65.9, 11828.0], [66.0, 11828.0], [66.1, 11828.0], [66.2, 11828.0], [66.3, 11828.0], [66.4, 11828.0], [66.5, 11828.0], [66.6, 11829.0], [66.7, 11829.0], [66.8, 11829.0], [66.9, 11829.0], [67.0, 11829.0], [67.1, 11829.0], [67.2, 11830.0], [67.3, 11830.0], [67.4, 11830.0], [67.5, 11830.0], [67.6, 11830.0], [67.7, 11830.0], [67.8, 11830.0], [67.9, 11831.0], [68.0, 11831.0], [68.1, 11831.0], [68.2, 11831.0], [68.3, 11831.0], [68.4, 11832.0], [68.5, 11832.0], [68.6, 11832.0], [68.7, 11832.0], [68.8, 11832.0], [68.9, 11832.0], [69.0, 11832.0], [69.1, 11833.0], [69.2, 11833.0], [69.3, 11833.0], [69.4, 11833.0], [69.5, 11833.0], [69.6, 11833.0], [69.7, 11834.0], [69.8, 11834.0], [69.9, 11834.0], [70.0, 11834.0], [70.1, 11834.0], [70.2, 11834.0], [70.3, 11834.0], [70.4, 11835.0], [70.5, 11835.0], [70.6, 11835.0], [70.7, 11835.0], [70.8, 11835.0], [70.9, 11836.0], [71.0, 11836.0], [71.1, 11836.0], [71.2, 11836.0], [71.3, 11836.0], [71.4, 11836.0], [71.5, 11837.0], [71.6, 11837.0], [71.7, 11837.0], [71.8, 11837.0], [71.9, 11838.0], [72.0, 11838.0], [72.1, 11838.0], [72.2, 11838.0], [72.3, 11838.0], [72.4, 11838.0], [72.5, 11839.0], [72.6, 11839.0], [72.7, 11839.0], [72.8, 11839.0], [72.9, 11840.0], [73.0, 11840.0], [73.1, 11840.0], [73.2, 11840.0], [73.3, 11840.0], [73.4, 11841.0], [73.5, 11841.0], [73.6, 11841.0], [73.7, 11841.0], [73.8, 11841.0], [73.9, 11841.0], [74.0, 11842.0], [74.1, 11842.0], [74.2, 11842.0], [74.3, 11842.0], [74.4, 11842.0], [74.5, 11842.0], [74.6, 11843.0], [74.7, 11843.0], [74.8, 11843.0], [74.9, 11843.0], [75.0, 11843.0], [75.1, 11843.0], [75.2, 11844.0], [75.3, 11844.0], [75.4, 11844.0], [75.5, 11844.0], [75.6, 11844.0], [75.7, 11844.0], [75.8, 11845.0], [75.9, 11845.0], [76.0, 11845.0], [76.1, 11845.0], [76.2, 11845.0], [76.3, 11845.0], [76.4, 11846.0], [76.5, 11846.0], [76.6, 11846.0], [76.7, 11846.0], [76.8, 11846.0], [76.9, 11846.0], [77.0, 11847.0], [77.1, 11847.0], [77.2, 11847.0], [77.3, 11847.0], [77.4, 11847.0], [77.5, 11847.0], [77.6, 11847.0], [77.7, 11848.0], [77.8, 11848.0], [77.9, 11848.0], [78.0, 11848.0], [78.1, 11848.0], [78.2, 11849.0], [78.3, 11849.0], [78.4, 11849.0], [78.5, 11849.0], [78.6, 11850.0], [78.7, 11850.0], [78.8, 11850.0], [78.9, 11850.0], [79.0, 11850.0], [79.1, 11850.0], [79.2, 11851.0], [79.3, 11851.0], [79.4, 11851.0], [79.5, 11851.0], [79.6, 11851.0], [79.7, 11851.0], [79.8, 11851.0], [79.9, 11851.0], [80.0, 11852.0], [80.1, 11852.0], [80.2, 11852.0], [80.3, 11852.0], [80.4, 11852.0], [80.5, 11853.0], [80.6, 11853.0], [80.7, 11853.0], [80.8, 11854.0], [80.9, 11854.0], [81.0, 11854.0], [81.1, 11854.0], [81.2, 11855.0], [81.3, 11855.0], [81.4, 11856.0], [81.5, 11856.0], [81.6, 11856.0], [81.7, 11857.0], [81.8, 11857.0], [81.9, 11857.0], [82.0, 11857.0], [82.1, 11857.0], [82.2, 11858.0], [82.3, 11858.0], [82.4, 11858.0], [82.5, 11859.0], [82.6, 11859.0], [82.7, 11859.0], [82.8, 11859.0], [82.9, 11860.0], [83.0, 11860.0], [83.1, 11860.0], [83.2, 11861.0], [83.3, 11861.0], [83.4, 11862.0], [83.5, 11862.0], [83.6, 11863.0], [83.7, 11863.0], [83.8, 11863.0], [83.9, 11863.0], [84.0, 11864.0], [84.1, 11864.0], [84.2, 11865.0], [84.3, 11865.0], [84.4, 11865.0], [84.5, 11866.0], [84.6, 11866.0], [84.7, 11866.0], [84.8, 11867.0], [84.9, 11867.0], [85.0, 11867.0], [85.1, 11867.0], [85.2, 11867.0], [85.3, 11867.0], [85.4, 11868.0], [85.5, 11868.0], [85.6, 11868.0], [85.7, 11869.0], [85.8, 11869.0], [85.9, 11869.0], [86.0, 11869.0], [86.1, 11870.0], [86.2, 11870.0], [86.3, 11870.0], [86.4, 11870.0], [86.5, 11870.0], [86.6, 11871.0], [86.7, 11871.0], [86.8, 11871.0], [86.9, 11872.0], [87.0, 11872.0], [87.1, 11872.0], [87.2, 11873.0], [87.3, 11873.0], [87.4, 11873.0], [87.5, 11874.0], [87.6, 11874.0], [87.7, 11874.0], [87.8, 11874.0], [87.9, 11875.0], [88.0, 11875.0], [88.1, 11875.0], [88.2, 11875.0], [88.3, 11876.0], [88.4, 11876.0], [88.5, 11876.0], [88.6, 11876.0], [88.7, 11877.0], [88.8, 11877.0], [88.9, 11877.0], [89.0, 11878.0], [89.1, 11878.0], [89.2, 11878.0], [89.3, 11879.0], [89.4, 11879.0], [89.5, 11879.0], [89.6, 11880.0], [89.7, 11881.0], [89.8, 11881.0], [89.9, 11881.0], [90.0, 11882.0], [90.1, 11882.0], [90.2, 11883.0], [90.3, 11883.0], [90.4, 11883.0], [90.5, 11884.0], [90.6, 11885.0], [90.7, 11885.0], [90.8, 11886.0], [90.9, 11886.0], [91.0, 11887.0], [91.1, 11888.0], [91.2, 11888.0], [91.3, 11889.0], [91.4, 11890.0], [91.5, 11890.0], [91.6, 11890.0], [91.7, 11892.0], [91.8, 11892.0], [91.9, 11893.0], [92.0, 11893.0], [92.1, 11894.0], [92.2, 11894.0], [92.3, 11896.0], [92.4, 11896.0], [92.5, 11897.0], [92.6, 11897.0], [92.7, 11898.0], [92.8, 11898.0], [92.9, 11899.0], [93.0, 11899.0], [93.1, 11900.0], [93.2, 11901.0], [93.3, 11902.0], [93.4, 11902.0], [93.5, 11903.0], [93.6, 11905.0], [93.7, 11905.0], [93.8, 11905.0], [93.9, 11906.0], [94.0, 11907.0], [94.1, 11908.0], [94.2, 11910.0], [94.3, 11911.0], [94.4, 11911.0], [94.5, 11912.0], [94.6, 11912.0], [94.7, 11913.0], [94.8, 11913.0], [94.9, 11914.0], [95.0, 11914.0], [95.1, 11915.0], [95.2, 11915.0], [95.3, 11916.0], [95.4, 11917.0], [95.5, 11917.0], [95.6, 11919.0], [95.7, 11920.0], [95.8, 11920.0], [95.9, 11921.0], [96.0, 11923.0], [96.1, 11924.0], [96.2, 11924.0], [96.3, 11925.0], [96.4, 11926.0], [96.5, 11926.0], [96.6, 11927.0], [96.7, 11927.0], [96.8, 11928.0], [96.9, 11928.0], [97.0, 11928.0], [97.1, 11928.0], [97.2, 11928.0], [97.3, 11928.0], [97.4, 11929.0], [97.5, 11929.0], [97.6, 11930.0], [97.7, 11930.0], [97.8, 11930.0], [97.9, 11931.0], [98.0, 11932.0], [98.1, 11932.0], [98.2, 11932.0], [98.3, 11933.0], [98.4, 11933.0], [98.5, 11934.0], [98.6, 11935.0], [98.7, 11935.0], [98.8, 11936.0], [98.9, 11937.0], [99.0, 11938.0], [99.1, 11939.0], [99.2, 11941.0], [99.3, 11942.0], [99.4, 11944.0], [99.5, 11945.0], [99.6, 11946.0], [99.7, 11948.0], [99.8, 11948.0], [99.9, 11950.0], [100.0, 11992.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 100.0, "maxY": 2792.0, "series": [{"data": [[100.0, 5.0], [200.0, 5.0], [300.0, 4.0], [400.0, 4.0], [500.0, 5.0], [600.0, 6.0], [700.0, 6.0], [800.0, 6.0], [900.0, 7.0], [1000.0, 5.0], [1100.0, 7.0], [1200.0, 6.0], [1300.0, 8.0], [1400.0, 7.0], [1500.0, 7.0], [1600.0, 9.0], [1700.0, 7.0], [1800.0, 8.0], [1900.0, 15.0], [2000.0, 11.0], [2100.0, 10.0], [2200.0, 10.0], [2300.0, 10.0], [2400.0, 10.0], [2500.0, 10.0], [2600.0, 7.0], [2700.0, 9.0], [2800.0, 10.0], [2900.0, 13.0], [3000.0, 9.0], [3100.0, 10.0], [3200.0, 9.0], [3300.0, 11.0], [3400.0, 10.0], [3500.0, 8.0], [3600.0, 10.0], [3700.0, 8.0], [3800.0, 8.0], [3900.0, 10.0], [4000.0, 10.0], [4100.0, 10.0], [4200.0, 9.0], [4300.0, 7.0], [4400.0, 12.0], [4500.0, 9.0], [4600.0, 9.0], [4700.0, 10.0], [4800.0, 10.0], [4900.0, 6.0], [5000.0, 10.0], [5100.0, 10.0], [5200.0, 9.0], [5300.0, 10.0], [5400.0, 11.0], [5500.0, 9.0], [5600.0, 10.0], [5700.0, 8.0], [5800.0, 8.0], [5900.0, 10.0], [6000.0, 10.0], [6100.0, 12.0], [6200.0, 11.0], [6300.0, 8.0], [6400.0, 10.0], [6500.0, 7.0], [6600.0, 10.0], [6700.0, 10.0], [6800.0, 10.0], [6900.0, 10.0], [7000.0, 9.0], [7100.0, 10.0], [7200.0, 7.0], [7300.0, 9.0], [7400.0, 10.0], [7500.0, 10.0], [7600.0, 10.0], [7700.0, 9.0], [7800.0, 8.0], [7900.0, 10.0], [8000.0, 9.0], [8100.0, 9.0], [8200.0, 10.0], [8300.0, 9.0], [8400.0, 9.0], [8500.0, 8.0], [8600.0, 8.0], [8700.0, 14.0], [8800.0, 10.0], [8900.0, 10.0], [9000.0, 10.0], [9100.0, 9.0], [9200.0, 10.0], [9300.0, 9.0], [9400.0, 8.0], [9500.0, 10.0], [9600.0, 8.0], [9700.0, 10.0], [9800.0, 10.0], [9900.0, 9.0], [10000.0, 9.0], [10100.0, 8.0], [10200.0, 10.0], [10300.0, 10.0], [10400.0, 10.0], [10500.0, 9.0], [10600.0, 10.0], [10700.0, 10.0], [10800.0, 10.0], [10900.0, 8.0], [11000.0, 10.0], [11100.0, 10.0], [11200.0, 8.0], [11300.0, 9.0], [11400.0, 10.0], [11500.0, 10.0], [11600.0, 667.0], [11700.0, 1262.0], [11800.0, 2792.0], [11900.0, 433.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6110.0, "series": [{"data": [[0.0, 18.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 63.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6110.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 330.1426403641889, "minX": 1.69617744E12, "maxY": 988.595275590551, "series": [{"data": [[1.69617756E12, 330.1426403641889], [1.69617744E12, 942.0309734513277], [1.6961775E12, 988.595275590551]], "isOverall": false, "label": "search", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69617756E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 140.0, "minX": 1.0, "maxY": 11883.0, "series": [{"data": [[4.0, 11694.0], [5.0, 11686.0], [6.0, 11689.0], [7.0, 11701.0], [8.0, 11703.0], [9.0, 11687.0], [10.0, 11692.0], [11.0, 11694.0], [12.0, 11690.0], [14.0, 11747.5], [15.0, 11660.0], [16.0, 11645.0], [17.0, 11642.0], [18.0, 11719.0], [19.0, 11714.0], [20.0, 11707.0], [21.0, 11694.0], [22.0, 11694.0], [23.0, 11718.0], [24.0, 11717.0], [25.0, 11703.0], [26.0, 11692.0], [27.0, 11693.0], [28.0, 11716.0], [29.0, 11716.0], [30.0, 11695.0], [31.0, 11695.0], [33.0, 11705.0], [34.0, 11719.0], [37.0, 11697.0], [36.0, 11693.5], [39.0, 11720.0], [38.0, 11714.0], [41.0, 11691.0], [40.0, 11698.0], [43.0, 11722.0], [42.0, 11699.0], [45.0, 11690.0], [44.0, 11714.0], [47.0, 11722.0], [46.0, 11699.0], [49.0, 11715.0], [48.0, 11700.0], [51.0, 11701.0], [50.0, 11690.0], [52.0, 11706.0], [55.0, 11691.0], [54.0, 11721.0], [57.0, 11709.0], [56.0, 11712.0], [59.0, 11733.0], [61.0, 11711.0], [60.0, 11716.0], [62.0, 11711.0], [66.0, 11730.0], [65.0, 11717.0], [64.0, 11736.0], [71.0, 11732.0], [70.0, 11711.0], [69.0, 11749.0], [68.0, 11728.0], [75.0, 11719.0], [74.0, 11748.0], [73.0, 11725.0], [72.0, 11730.0], [79.0, 11749.0], [78.0, 11727.0], [77.0, 11730.0], [76.0, 11731.0], [83.0, 11729.0], [82.0, 11730.0], [81.0, 11733.0], [80.0, 11721.0], [87.0, 11730.0], [86.0, 11733.0], [85.0, 11720.0], [84.0, 11762.0], [91.0, 11734.0], [89.0, 11763.0], [88.0, 11729.0], [95.0, 11731.0], [94.0, 11762.0], [93.0, 11732.0], [92.0, 11731.0], [99.0, 11765.0], [98.0, 11735.0], [97.0, 11732.0], [96.0, 11740.0], [103.0, 11737.0], [101.0, 11740.5], [107.0, 11736.0], [106.0, 11745.0], [105.0, 11737.0], [104.0, 11766.0], [111.0, 11751.0], [110.0, 11746.0], [109.0, 11767.0], [108.0, 11737.0], [115.0, 11741.0], [114.0, 11769.0], [113.0, 11729.0], [112.0, 11734.0], [119.0, 11753.0], [116.0, 11730.0], [123.0, 11757.0], [121.0, 11734.5], [126.0, 11761.5], [124.0, 11763.0], [135.0, 11733.0], [134.0, 11738.0], [132.0, 11759.0], [131.0, 11733.0], [130.0, 11792.0], [129.0, 11744.666666666666], [142.0, 11760.0], [141.0, 11761.0], [140.0, 11735.0], [139.0, 11761.5], [146.0, 4012.6666666666665], [147.0, 140.0], [151.0, 11763.0], [150.0, 11737.0], [149.0, 11768.0], [145.0, 11734.0], [144.0, 11772.5], [159.0, 11779.0], [158.0, 11762.0], [157.0, 11763.0], [156.0, 11764.0], [155.0, 11739.0], [154.0, 11782.0], [153.0, 11761.0], [152.0, 11761.0], [167.0, 11762.0], [166.0, 11766.0], [165.0, 11741.0], [164.0, 11776.0], [163.0, 11761.0], [161.0, 11766.0], [160.0, 11741.0], [174.0, 4035.6666666666665], [175.0, 11756.0], [173.0, 11761.0], [172.0, 11763.0], [171.0, 11765.0], [170.0, 11744.0], [169.0, 11776.0], [168.0, 11762.0], [183.0, 11782.0], [182.0, 11767.0], [181.0, 11768.0], [180.0, 11769.0], [179.0, 11774.0], [178.0, 11782.0], [177.0, 11765.0], [176.0, 11767.0], [191.0, 11761.0], [190.0, 11769.0], [189.0, 11776.0], [188.0, 11761.0], [187.0, 11788.0], [186.0, 11771.0], [185.0, 11769.0], [184.0, 11776.0], [199.0, 11776.0], [198.0, 11762.0], [196.0, 11758.0], [195.0, 11769.0], [194.0, 11770.0], [193.0, 11779.0], [192.0, 11759.0], [205.0, 5987.0], [207.0, 11763.0], [206.0, 11763.0], [204.0, 11772.5], [202.0, 11758.0], [201.0, 11760.0], [200.0, 11769.0], [215.0, 11772.0], [214.0, 11775.5], [212.0, 11763.0], [211.0, 11763.0], [210.0, 11769.0], [209.0, 11781.0], [208.0, 11769.0], [216.0, 6011.0], [217.0, 6011.0], [223.0, 11770.0], [222.0, 11772.0], [221.0, 11768.0], [220.0, 11773.0], [219.0, 11776.5], [231.0, 11771.0], [230.0, 11782.0], [229.0, 11786.0], [227.0, 11788.0], [226.0, 11768.0], [225.0, 11777.0], [224.0, 11785.0], [239.0, 11800.5], [237.0, 11791.0], [236.0, 11773.0], [235.0, 11783.0], [234.0, 11786.0], [232.0, 11789.0], [241.0, 6028.5], [247.0, 11792.0], [246.0, 11771.0], [245.0, 11780.0], [244.0, 11802.5], [243.0, 11790.0], [240.0, 11780.0], [248.0, 299.5], [255.0, 11780.0], [254.0, 11819.0], [253.0, 11794.5], [251.0, 11771.0], [250.0, 11778.0], [249.0, 11803.0], [270.0, 11782.0], [271.0, 11777.0], [269.0, 11797.0], [268.0, 11823.0], [267.0, 11802.0], [266.0, 11776.0], [265.0, 11781.0], [264.0, 11822.0], [263.0, 11787.0], [257.0, 11795.0], [256.0, 11773.0], [259.0, 11817.0], [258.0, 11796.0], [262.0, 11789.0], [261.0, 11775.0], [260.0, 11781.0], [275.0, 11779.0], [285.0, 11779.0], [287.0, 11804.0], [284.0, 11821.0], [282.0, 11801.5], [280.0, 11777.0], [279.0, 11813.0], [277.0, 11805.0], [276.0, 11779.0], [274.0, 11823.0], [273.0, 11798.0], [272.0, 11804.0], [302.0, 11811.0], [288.0, 4179.666666666666], [295.0, 11778.0], [294.0, 11817.0], [293.0, 11818.0], [292.0, 11803.0], [289.0, 6085.0], [303.0, 11821.0], [301.0, 11808.0], [300.0, 11776.0], [291.0, 11808.0], [290.0, 11778.0], [299.0, 11818.0], [298.0, 11818.0], [297.0, 11807.0], [296.0, 11806.0], [317.0, 11810.0], [319.0, 11818.5], [316.0, 11806.0], [307.0, 11810.0], [306.0, 11777.0], [305.0, 11810.0], [304.0, 11819.0], [315.0, 11778.0], [314.0, 11820.0], [313.0, 11820.0], [312.0, 11810.0], [311.0, 11808.0], [310.0, 11776.0], [309.0, 11820.0], [308.0, 11821.0], [334.0, 11819.0], [335.0, 11778.0], [332.0, 11808.5], [322.0, 11807.5], [320.0, 11777.0], [330.0, 11777.0], [329.0, 11817.5], [327.0, 11804.0], [326.0, 11814.0], [325.0, 11776.0], [324.0, 11818.5], [350.0, 11775.0], [343.0, 4220.0], [336.0, 11815.0], [339.0, 11821.0], [337.0, 11804.0], [342.0, 11804.0], [341.0, 11816.0], [340.0, 11778.0], [351.0, 11804.0], [349.0, 11810.0], [348.0, 11810.0], [347.0, 11803.0], [346.0, 11815.0], [345.0, 11776.0], [344.0, 11820.0], [355.0, 11775.0], [365.0, 11774.0], [357.0, 6121.0], [367.0, 11810.0], [364.0, 11805.5], [354.0, 11809.0], [352.0, 11814.0], [362.0, 11804.0], [361.0, 11795.0], [359.0, 11806.0], [358.0, 11808.0], [356.0, 11806.0], [382.0, 11814.0], [383.0, 11793.0], [381.0, 11802.0], [380.0, 11774.0], [379.0, 11793.5], [377.0, 11814.0], [376.0, 11802.0], [375.0, 11774.0], [369.0, 11794.0], [371.0, 11816.0], [370.0, 11774.0], [374.0, 11792.0], [373.0, 11794.0], [372.0, 11803.0], [399.0, 11790.0], [394.0, 6136.5], [398.0, 11792.0], [397.0, 11813.0], [396.0, 11807.0], [387.0, 11806.5], [385.0, 11775.0], [384.0, 11791.0], [395.0, 11778.0], [393.0, 11792.0], [392.0, 11814.0], [391.0, 11804.0], [390.0, 11778.0], [389.0, 11791.0], [388.0, 11793.0], [414.0, 11790.0], [415.0, 11807.0], [412.0, 11810.0], [403.0, 11791.0], [402.0, 11812.0], [401.0, 11806.0], [400.0, 11779.0], [411.0, 11806.0], [410.0, 11778.0], [409.0, 11789.0], [408.0, 11792.0], [407.0, 11810.0], [406.0, 11806.0], [405.0, 11779.0], [404.0, 11791.0], [431.0, 11797.0], [426.0, 6146.0], [429.0, 11795.5], [419.0, 11789.0], [417.0, 11810.0], [416.0, 11778.0], [427.0, 11809.0], [425.0, 11809.0], [424.0, 11788.0], [422.0, 11809.0], [421.0, 11806.0], [420.0, 11780.0], [447.0, 11802.0], [433.0, 6157.0], [432.0, 11809.0], [435.0, 11785.0], [434.0, 11798.0], [441.0, 6172.0], [446.0, 11797.0], [444.0, 11800.0], [443.0, 11795.0], [442.0, 11803.0], [440.0, 11787.0], [439.0, 11799.0], [438.0, 11796.0], [437.0, 11809.0], [436.0, 11810.0], [462.0, 11791.0], [463.0, 11778.0], [461.0, 11799.5], [460.0, 11785.0], [458.0, 11791.0], [457.0, 11781.0], [456.0, 11811.0], [455.0, 11784.0], [449.0, 11803.0], [448.0, 11796.0], [451.0, 11811.0], [450.0, 11783.0], [454.0, 11792.0], [453.0, 11805.0], [452.0, 11801.0], [477.0, 11786.0], [479.0, 11795.0], [464.0, 6178.5], [473.0, 6189.0], [478.0, 11795.0], [476.0, 11808.0], [466.0, 11788.0], [465.0, 11817.0], [474.0, 11792.0], [472.0, 11780.0], [471.0, 11799.333333333334], [468.0, 11785.0], [494.0, 11802.0], [487.0, 6197.5], [495.0, 11804.0], [493.0, 11794.0], [483.0, 11789.0], [482.0, 11799.0], [481.0, 11827.0], [480.0, 11796.0], [491.0, 11830.0], [490.0, 11799.0], [489.0, 11799.0], [488.0, 11797.0], [486.0, 11830.0], [485.0, 11796.0], [484.0, 11798.0], [511.0, 11832.0], [505.0, 4366.0], [510.0, 11815.0], [509.0, 11808.0], [508.0, 11804.0], [499.0, 11803.0], [498.0, 11794.0], [497.0, 11800.0], [496.0, 11826.0], [507.0, 11805.0], [506.0, 11830.0], [504.0, 11805.0], [503.0, 11802.0], [501.0, 11829.0], [500.0, 11807.0], [540.0, 11829.0], [516.0, 6254.0], [521.0, 6257.5], [520.0, 11818.0], [523.0, 11818.0], [522.0, 11811.0], [525.0, 11819.0], [524.0, 11816.0], [527.0, 11812.0], [513.0, 11808.0], [512.0, 11808.0], [515.0, 11818.0], [514.0, 11810.0], [526.0, 11843.0], [543.0, 11827.0], [528.0, 11815.0], [530.0, 11819.0], [529.0, 11817.0], [532.0, 11813.0], [531.0, 11844.0], [535.0, 11824.0], [534.0, 11816.5], [542.0, 11814.0], [541.0, 11851.0], [539.0, 11826.0], [538.0, 11823.0], [537.0, 11813.0], [536.0, 11847.0], [519.0, 11813.0], [518.0, 11812.0], [572.0, 11848.0], [553.0, 4403.333333333334], [552.0, 11841.0], [555.0, 11834.0], [554.0, 11844.0], [557.0, 11846.0], [556.0, 11851.0], [575.0, 11834.0], [560.0, 11834.0], [563.0, 11817.0], [561.0, 11852.0], [565.0, 11836.0], [564.0, 11842.0], [574.0, 11841.0], [573.0, 11820.0], [571.0, 11851.0], [570.0, 11835.0], [569.0, 11843.5], [551.0, 11850.0], [550.0, 11835.0], [549.0, 11843.0], [548.0, 11837.0], [547.0, 11815.0], [546.0, 11850.0], [545.0, 11831.0], [544.0, 11839.0], [559.0, 11828.0], [567.0, 11819.0], [566.0, 11853.0], [604.0, 11841.0], [576.0, 6290.0], [587.0, 6275.5], [586.0, 11848.0], [585.0, 11830.0], [584.0, 11843.5], [589.0, 11843.5], [591.0, 11845.0], [590.0, 11830.0], [607.0, 11825.0], [593.0, 11843.0], [595.0, 11829.0], [594.0, 11834.0], [597.0, 11823.0], [596.0, 11845.0], [599.0, 11844.0], [598.0, 11842.0], [606.0, 11841.0], [605.0, 11832.0], [603.0, 11844.0], [602.0, 11824.0], [601.0, 11844.0], [600.0, 11830.0], [582.0, 11822.0], [581.0, 11851.0], [580.0, 11831.0], [579.0, 11842.5], [577.0, 11822.0], [634.0, 11824.0], [638.0, 11840.0], [626.0, 6297.0], [628.0, 6307.0], [627.0, 11831.0], [629.0, 11839.0], [631.0, 11831.0], [630.0, 11838.0], [639.0, 11823.0], [625.0, 11839.0], [624.0, 11842.0], [637.0, 11837.0], [636.0, 11829.0], [635.0, 11830.0], [633.0, 11842.0], [632.0, 11831.0], [623.0, 11840.0], [609.0, 11842.0], [611.0, 11839.0], [610.0, 11833.0], [615.0, 11836.0], [614.0, 11835.333333333334], [622.0, 11829.0], [621.0, 11833.0], [620.0, 11837.0], [619.0, 11840.0], [618.0, 11844.0], [617.0, 11827.0], [616.0, 11834.0], [669.0, 11822.0], [646.0, 6305.0], [655.0, 11839.0], [641.0, 11828.0], [640.0, 11832.0], [643.0, 11857.0], [642.0, 11839.0], [645.0, 11836.0], [644.0, 11840.0], [654.0, 11840.0], [653.0, 11859.0], [652.0, 11841.0], [651.0, 11828.0], [650.0, 11837.0], [649.0, 11840.0], [648.0, 11858.0], [664.0, 11870.0], [647.0, 11839.0], [660.0, 6319.5], [659.0, 11821.0], [658.0, 11857.0], [657.0, 11858.0], [656.0, 11826.0], [661.0, 11825.0], [663.0, 11838.0], [662.0, 11823.0], [671.0, 11844.0], [670.0, 11859.0], [668.0, 11823.0], [667.0, 11829.0], [666.0, 11844.0], [665.0, 11821.0], [697.0, 11836.0], [702.0, 11831.0], [691.0, 6336.0], [690.0, 11845.0], [689.0, 11830.0], [692.0, 11828.0], [701.0, 11844.0], [700.0, 11850.0], [699.0, 11830.5], [696.0, 11844.0], [679.0, 11827.5], [677.0, 11832.0], [676.0, 11851.0], [675.0, 11863.0], [674.0, 11826.0], [673.0, 11828.0], [672.0, 11830.0], [687.0, 11827.0], [686.0, 11836.0], [685.0, 11844.0], [684.0, 11830.5], [682.0, 11830.0], [681.0, 11835.0], [680.0, 11855.0], [695.0, 11847.0], [694.0, 11829.0], [728.0, 11837.0], [735.0, 11852.0], [730.0, 6375.0], [706.0, 6341.5], [705.0, 11848.0], [704.0, 11831.0], [709.0, 11832.0], [707.0, 11830.0], [711.0, 11835.0], [710.0, 11846.0], [719.0, 11834.0], [718.0, 11833.0], [717.0, 11827.0], [716.0, 11833.0], [715.0, 11845.0], [714.0, 11834.0], [713.0, 11832.0], [712.0, 11828.0], [721.0, 6335.5], [720.0, 11845.0], [723.0, 11834.0], [722.0, 11828.0], [725.0, 11847.0], [724.0, 11835.0], [727.0, 11836.0], [726.0, 11831.0], [732.0, 4509.0], [734.0, 11859.0], [731.0, 11839.0], [729.0, 11882.0], [765.0, 6406.5], [736.0, 6377.5], [737.0, 11883.0], [751.0, 11833.0], [750.0, 11829.0], [749.0, 11862.0], [748.0, 11835.0], [746.0, 11833.0], [745.0, 11829.0], [744.0, 11864.0], [739.0, 8201.0], [754.0, 6414.5], [753.0, 11835.0], [752.0, 11834.0], [755.0, 11830.0], [757.0, 11833.0], [756.0, 11835.0], [759.0, 11857.0], [758.0, 11836.0], [767.0, 11833.0], [766.0, 11834.0], [764.0, 11854.0], [763.0, 11832.0], [762.0, 11832.0], [761.0, 11832.0], [760.0, 11834.0], [743.0, 11835.0], [742.0, 11836.0], [741.0, 11834.0], [740.0, 11828.0], [793.0, 11809.0], [797.0, 11830.0], [781.0, 992.0], [779.0, 11856.0], [778.0, 11826.0], [777.0, 11834.5], [782.0, 11833.333333333334], [792.0, 11833.5], [775.0, 11832.0], [774.0, 11856.0], [773.0, 11827.0], [772.0, 11835.0], [771.0, 11831.0], [769.0, 11858.0], [768.0, 11830.0], [783.0, 11827.0], [785.0, 6413.5], [784.0, 11856.0], [788.0, 11865.0], [787.0, 11834.5], [790.0, 11832.0], [789.0, 11807.0], [799.0, 11850.0], [798.0, 11810.0], [796.0, 11840.0], [795.0, 11831.0], [794.0, 11852.0], [824.0, 11845.0], [829.0, 11845.0], [827.0, 8232.0], [830.0, 11836.0], [816.0, 11845.0], [818.0, 11849.0], [817.0, 11823.0], [828.0, 11815.0], [825.0, 11837.0], [815.0, 11835.0], [800.0, 11831.0], [804.0, 11830.5], [802.0, 11836.5], [807.0, 11837.5], [805.0, 11831.0], [814.0, 11831.5], [812.0, 11847.0], [811.0, 11830.0], [810.0, 11832.0], [809.0, 11831.5], [823.0, 11812.0], [822.0, 11833.5], [820.0, 11836.0], [819.0, 11813.0], [857.0, 11832.0], [861.0, 11824.0], [848.0, 4638.0], [850.0, 11831.0], [849.0, 11846.0], [852.0, 11835.0], [851.0, 11826.0], [855.0, 11830.0], [854.0, 11830.5], [862.0, 6452.0], [863.0, 11815.0], [860.0, 11827.0], [859.0, 11814.0], [858.0, 11846.0], [856.0, 11825.0], [839.0, 11846.0], [838.0, 11816.0], [837.0, 11840.0], [836.0, 11825.0], [835.0, 11836.0], [834.0, 11844.0], [833.0, 11816.0], [832.0, 11834.5], [847.0, 11840.0], [846.0, 11826.0], [845.0, 11831.0], [844.0, 11846.0], [843.0, 11814.0], [842.0, 11840.0], [841.0, 11825.0], [840.0, 11833.0], [889.0, 11817.0], [894.0, 11824.5], [890.0, 6460.5], [895.0, 11815.0], [881.0, 11822.0], [883.0, 11838.0], [882.0, 11822.0], [885.0, 11819.0], [884.0, 11817.0], [892.0, 11814.0], [891.0, 11823.0], [888.0, 11836.0], [871.0, 11825.0], [870.0, 11824.0], [869.0, 11843.0], [868.0, 11818.0], [867.0, 11828.0], [866.0, 11824.0], [865.0, 11827.0], [864.0, 11843.0], [879.0, 11828.5], [877.0, 11823.0], [876.0, 11823.5], [874.0, 11840.0], [873.0, 11816.0], [872.0, 11824.0], [887.0, 11820.0], [886.0, 11822.0], [900.0, 1116.0], [925.0, 11818.0], [896.0, 6454.0], [897.0, 11812.0], [899.0, 11833.0], [898.0, 11819.0], [911.0, 11819.0], [910.0, 11817.0], [909.0, 11817.0], [908.0, 11833.0], [907.0, 11811.0], [906.0, 11819.0], [905.0, 11819.0], [904.0, 11817.0], [919.0, 8257.333333333334], [917.0, 11809.0], [916.0, 11818.0], [915.0, 11817.0], [914.0, 11828.0], [913.0, 11815.0], [912.0, 11809.0], [927.0, 11811.0], [926.0, 11825.0], [924.0, 11814.0], [923.0, 11828.0], [922.0, 11809.0], [921.0, 11822.0], [920.0, 11815.0], [903.0, 11832.0], [902.0, 11813.0], [901.0, 11816.5], [957.0, 11831.0], [951.0, 6502.5], [950.0, 11818.0], [949.0, 11816.0], [948.0, 11823.0], [947.0, 11829.0], [946.0, 11832.0], [945.0, 11817.0], [944.0, 11816.0], [959.0, 11820.0], [958.0, 11826.0], [956.0, 11836.0], [955.0, 11820.0], [954.0, 11819.0], [953.0, 11825.0], [952.0, 11829.0], [935.0, 11818.0], [934.0, 11826.0], [933.0, 11823.0], [932.0, 11830.0], [931.0, 11825.0], [930.0, 11819.0], [929.0, 11833.0], [928.0, 11819.0], [943.0, 11822.0], [942.0, 11833.0], [941.0, 11829.0], [940.0, 11817.0], [939.0, 11818.0], [938.0, 11823.0], [937.0, 11832.0], [936.0, 11828.0], [989.0, 11828.0], [962.0, 6507.0], [961.0, 11841.0], [960.0, 11821.0], [963.0, 11831.0], [965.0, 11824.0], [964.0, 11830.0], [967.0, 11841.0], [966.0, 11849.0], [975.0, 11827.0], [974.0, 11835.0], [973.0, 11834.0], [972.0, 11842.0], [971.0, 11847.0], [970.0, 11824.0], [969.0, 11833.0], [968.0, 11833.0], [976.0, 6523.0], [977.0, 11845.0], [979.0, 11838.0], [978.0, 11834.0], [981.0, 11858.0], [980.0, 11826.0], [983.0, 11833.0], [982.0, 11858.0], [984.0, 6509.5], [991.0, 11836.0], [990.0, 11836.0], [988.0, 11830.0], [987.0, 11832.0], [986.0, 11836.0], [985.0, 11829.0], [1000.0, 10781.97857003701], [998.0, 11818.0], [997.0, 11820.0], [996.0, 11831.0], [995.0, 11818.0], [994.0, 11820.0], [993.0, 11854.0], [992.0, 11838.0], [1.0, 11669.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[915.1069294136664, 10848.604425779362]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1740.2, "minX": 1.69617744E12, "maxY": 934363.25, "series": [{"data": [[1.69617756E12, 121209.38333333333], [1.69617744E12, 83136.7], [1.6961775E12, 934363.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69617756E12, 2537.15], [1.69617744E12, 1740.2], [1.6961775E12, 19558.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69617756E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2981.9800884955744, "minX": 1.69617744E12, "maxY": 11786.793626707135, "series": [{"data": [[1.69617756E12, 11786.793626707135], [1.69617744E12, 2981.9800884955744], [1.6961775E12, 11426.84212598418]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69617756E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2981.783185840709, "minX": 1.69617744E12, "maxY": 11786.758725341433, "series": [{"data": [[1.69617756E12, 11786.758725341433], [1.69617744E12, 2981.783185840709], [1.6961775E12, 11426.784448818908]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69617756E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1805118110236213, "minX": 1.69617744E12, "maxY": 19.46460176991153, "series": [{"data": [[1.69617756E12, 0.31562974203338395], [1.69617744E12, 19.46460176991153], [1.6961775E12, 0.1805118110236213]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69617756E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 135.0, "minX": 1.69617744E12, "maxY": 11992.0, "series": [{"data": [[1.69617756E12, 11859.0], [1.69617744E12, 5416.0], [1.6961775E12, 11992.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69617756E12, 11839.0], [1.69617744E12, 4933.9], [1.6961775E12, 11892.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69617756E12, 11852.4], [1.69617744E12, 5377.0], [1.6961775E12, 11941.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69617756E12, 11844.0], [1.69617744E12, 5179.35], [1.6961775E12, 11921.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69617756E12, 11642.0], [1.69617744E12, 135.0], [1.6961775E12, 5428.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69617756E12, 11792.0], [1.69617744E12, 2994.5], [1.6961775E12, 11813.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69617756E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 576.0, "minX": 44.0, "maxY": 11838.0, "series": [{"data": [[69.0, 1470.0], [83.0, 11838.0], [82.0, 11817.5], [81.0, 11774.0], [86.0, 11719.0], [85.0, 11818.0], [84.0, 11789.0], [87.0, 11795.0], [44.0, 576.0], [88.0, 11772.5], [55.0, 11699.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 88.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 576.0, "minX": 44.0, "maxY": 11838.0, "series": [{"data": [[69.0, 1468.0], [83.0, 11838.0], [82.0, 11817.5], [81.0, 11774.0], [86.0, 11719.0], [85.0, 11818.0], [84.0, 11789.0], [87.0, 11795.0], [44.0, 576.0], [88.0, 11772.5], [55.0, 11699.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 88.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 24.2, "minX": 1.69617744E12, "maxY": 78.98333333333333, "series": [{"data": [[1.69617744E12, 24.2], [1.6961775E12, 78.98333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6961775E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 7.533333333333333, "minX": 1.69617744E12, "maxY": 84.66666666666667, "series": [{"data": [[1.69617756E12, 10.983333333333333], [1.69617744E12, 7.533333333333333], [1.6961775E12, 84.66666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69617756E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 7.533333333333333, "minX": 1.69617744E12, "maxY": 84.66666666666667, "series": [{"data": [[1.69617756E12, 10.983333333333333], [1.69617744E12, 7.533333333333333], [1.6961775E12, 84.66666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69617756E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7.533333333333333, "minX": 1.69617744E12, "maxY": 84.66666666666667, "series": [{"data": [[1.69617756E12, 10.983333333333333], [1.69617744E12, 7.533333333333333], [1.6961775E12, 84.66666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69617756E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

